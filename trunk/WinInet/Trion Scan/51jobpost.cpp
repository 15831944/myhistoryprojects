// 51jobpost.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "51jobpost.h"
#include "51jobpostDlg.h"
#include "RegDlg.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CjobpostApp

BEGIN_MESSAGE_MAP(CjobpostApp, CWinApp)
	ON_COMMAND(ID_HELP, CWinApp::OnHelp)
END_MESSAGE_MAP()


// CjobpostApp 构造

CjobpostApp::CjobpostApp()
{
	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CjobpostApp 对象

CjobpostApp theApp;


// CjobpostApp 初始化

BOOL CjobpostApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControls()。否则，将无法创建窗口。
	InitCommonControls();

	CWinApp::InitInstance();

	AfxEnableControlContainer();

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));
	gl_strMac = GetMac();
	CString strAppPath = "";
	GetAppPath(strAppPath);
	strAppPath += "set.ini";
	char szTemp[2048] = {0};
	CString strNode = "set";
	::GetPrivateProfileString(strNode,"username", "",(LPSTR)szTemp,2047, strAppPath);
	CString strUser = szTemp;	
	memset(szTemp,0,2048);
	::GetPrivateProfileString(strNode,"password", "",(LPSTR)szTemp,2047, strAppPath);
	CString strPwd = szTemp;
	int iRet = 0;
	if (strUser != "" && strPwd != "")
	{
		//进行验证
		iRet = Reg(strUser,strPwd,gl_strMac.c_str());
	}
	if (!iRet)
	{
		CRegDlg dlgReg;
		dlgReg.DoModal();
		iRet = dlgReg.m_iRegSuc;
		if (!iRet)
		{
			return FALSE;
		}
	}
	CjobpostDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: 在此放置处理何时用“确定”来关闭
		//对话框的代码
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 在此放置处理何时用“取消”来关闭
		//对话框的代码
	}

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	// 而不是启动应用程序的消息泵。
	return FALSE;
}

int CjobpostApp::GetAppPath(CString &strAppPath)
{
	int iRet = -3;
	try
	{
		TCHAR szBuff[_MAX_PATH];
		VERIFY(::GetModuleFileName(AfxGetApp()->m_hInstance, szBuff, _MAX_PATH));
		strAppPath.Format("%s",szBuff);
		int pos=strAppPath.ReverseFind('\\');
		strAppPath=strAppPath.Left(pos+1);		
		iRet = 0;
	}
	catch (...)
	{

	}
	return iRet;	
}
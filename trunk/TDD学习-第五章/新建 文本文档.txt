依赖注入

原始代码的问题:
1. 静态绑定, 无法在不变更源代码的情况下改变它的具体实现. 无法模拟类之间的依赖关系,导致无法将单元测试的代码隔离起来.

如果要变更原始代码的话,则违背了OCP原则.

DI出现的背景



1.介绍NInject
2.Moq
3.ORM框架 NHibernate , NBear



代码与具体实现绑定在一起,必需修改代码才能改变关联的具体实例.
违反了SRP.

/*****************************************/
增加了类与类之间的关联

不易解偶







DRY――Dont Repeat Yourself Principle，直译为“不要重复自己”
object relational mapper (ORM) 对象-关系映射


总结:
依赖注入使得我们可以将类之间的依赖关系建立在接口之上,而不是类的具体实现;使得我们可以在运行阶段改变类与类之间的具体依赖关系,也让我们可以模拟类的具体实现,以保证在单元测试时的代码隔离.

仓库模式:使数据与具体的实现逻辑相隔离,让模拟数据访问变得更加容易.